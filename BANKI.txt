What does a doctype do?	The DOCTYPE declaration is used to tell what version of the HTML specifications your document respects. The most common version of this is <!DOCTYPE html> for the HTML5 standards. Read More: Front End Interview Handbook
How do you serve a page with content in multiple languages?	To change the language, you can set the lang attribute in the HTML. It won’t change the HTML document, but the browser will be able to identify the language of the HTML document and will translate the page in your preferred language. You can also display alternate language pages based on the user’s location. Read More:
What kind of things must you be wary of when design or developing for multilingual sites?	Definitely word spacing. You can’t always use the same word or phrasing because depending on the language, sentences or words can take more or less space and affect the layout. This also applies to images. You also need to be careful of colors, designs or images that can be perceived as insensitive or offensive in certain languages. Read More: Some tips for designing multilingual sites
What are data- attributes good for?	Data attributes are defined by developers, rather than attributes that are natively built into HTML. Their main usage is so the HTML can communicate with the CSS and JS. You can store information like scores in a game or other information that’d be constantly changing. You can even use attribute selectors to change the CSS based on that as well. Read More: MDN:Using data attributes
Consider HTML5 as an open web platform. What are the building blocks of HTML5?	Semantics - Allow you to describe more precisely what your content is. Connectivity - Communicate with the server in new and innovative ways. Offline and storage - Allow webpages to store data on the client-side locally and operate offline more efficiently. Multimedia -Making video and audio first-class citizens in the Open Web. 2D/3D graphics and effects - Allowing a more diverse range of presentation options. Performance and integration - Providing greater speed optimization and better usage of Computer Hardware. Device access - Allowing for the usage of various input and output devices. Styling - Letting authors write more sophisticated themes. Read More: MDN - HTML5
Describe the difference between a cookie, sessionStorage and localStorage.	localStorage is client sided, lasts forever, is persistent across browser sessions. sessionStorage is client sided, lasts until you close the tab, and is not persistent across browser sessions. Cookies can be client or server sided, with a manually set expiration time. That expiration time could be anything. Cookies are persistent across browser sessions and sent with every HTTP request. Read More: Using HTTP Cookies Local and Session Storage
Describe the difference between <script>, <script async> and <script defer>.	<script> - HTML parsing is blocked, the script is fetched and executed immediately, HTML parsing resumes after the script is executed. <script async> - The script will be fetched in parallel to HTML parsing and executed as soon as it is available (potentially before HTML parsing completes). Use async when the script is independent of any other scripts on the page, for example, analytics. <script defer> - The script will be fetched parallel to HTML parsing and executed after the page has finished parsing. If there’s multiple deferred scripts, they’re executed in order. For scripts that rely on a fully parsed DOM, deferred scripts can be helpful. Read More: async vs defer attributes Stack Overflow: Script Tag - async and defer Asynchronous vs Deferred JavaScript
Why is it generally a good idea to position CSS <link>s between <head></head> and JS <script>s just before </body>? Do you know any exceptions?	"<links> in the head allows CSS and HTML to be parsed simultaneously for progressive rendering so there aren’t flashes of unstyled content. <scripts> can throw errors if the DOM isn’t rendered. For example trying to manipulate DOM elements that haven’t been initialized yet. You can put scripts in the head by deferring it so it runs after the DOM is loaded. An exception for positioning of <script>s at the bottom is when your script contains document.write(), but these days it's not a good practice to use document.write() Read More: Put Stylesheets at the Top"
What is progressive rendering?	Progressive rendering are techniques to improve the performance of a webpage by rendering content to display as quickly as possible. Such as loading only the relevant/on screen images when the user scrolls. And prioritizing visible content first and the bare minimum CSS/JS needed for those. Some examples of this would be: Lazy loading of images – images on the page aren’t loaded all at once. JavaScript only loads when the user scrolls into the part that displays the image. Prioritizing visible content - Include only the minimum CSS/content/scripts necessary for the page that’d be rendered in the user’s browser to display as quickly as possible. You’d then use the deferred scripts or listen for DOMContentLoaded to load in other resources and content. Read More: Async Fragments: Rediscovering Progressive HTML Rendering What is progressive rendering?
Why you would use a srcset attribute in an image tag? Explain the process the browser uses when evaluating the content of this attribute.	You’d use the srcset to serve different images to users based on their device display width. For example you can display higher quality images to devices with retina display, while serving lower resolution images to lower-end devices. This will increase performance and decrease data wastage. Read More: Responsive images Responsive Images
Have you used different HTML templating languages before?	In 100Devs we use EJS to template our HTML dynamically depending on the data being served. There are many more out there such as ERB, Slim, Handlebars, Liquid, etc. provide similar functionality of escaping content and helpful filters for manipulating the data to be displayed. Most templating engines will also allow you to inject your own filters in the event you need custom processing before display. Read More:
What is CSS selector specificity and how does it work?	Specificity is how browsers decide which CSS property values are the most relevant and applied. CSS is cascading so it’s applied top to bottom, but it can only override existing styles if the selector specificity is equal or greater than previous CSS. The weight of the specificity is based on how specific the selector is. For example, elements have a weight of 1, classes a weight of 10, ids a weight of 100 and inline css or !important declarations have a weight of 1000. These values are all additive. Read More: CSS Specificity
"What's the difference between ""resetting"" and ""normalizing"" CSS? Which would you choose, and why?"	Every browser has in-built CSS by default. And that’s not always desirable because you can have CSS elements that conflict or aren’t intended, which can cause some headaches debugging later. A CSS reset is used to undo any of that browser applied CSS, where a CSS normalize is like a reset but maintains some default styling among browsers. I generally prefer a CSS reset because I prefer the fresh slate, but I’ve worked with developers that prefer CSS normalize because they’re more used to the default styling. Read More: Difference between “resetting” and “normalizing” in CSS
Describe floats and how they work.	The float property removes an element from the normal flow of the page and places it in either the left or right side of the container, allowing text and inline elements to wrap around it. Floats are typically for floating images inside of blocks of text, especially after flexbox and grid took its place. Read More: MDN: Float
Describe z-index and how stacking context is formed.	Z-index relates to the z-axis, or what elements are stacked on top of each other. Z-index is 0 by default. In order to assign a Z-index you MUST have a position other than ‘static’ declared. Z-index is also relative to the stacking context, which by default is shared by the entire document. To create a new stacking context on a parent it must have a position and declared Z-index value OR have an opacity < 1. Read More: MDN: z-index
Describe BFC (Block Formatting Context) and how it works.	"Block formatting context is a process that occurs in the rendering of a web page. It determines where the boxes are laid out. Each box's left outer edge touches the left edge of the containing block. Read More: Block Formatting Contexts in CSS"
What are the various clearing techniques and which is appropriate for what context?	"Elements with ""clear: "" will appear beneath a floated element, rather than next to them. Clear: none Clear: Left Clear: right (or both) Read More: MDN: clear"
Explain CSS sprites, and how you would implement them on a page or site.	Websites often deal with tons of images, but a lot of image requests add up and reduces the performance of your website. So instead of having to load a ton of images, you can sprite images by quilting together multiple images into one large image. This way multiple image requests can become a singular HTTP request. Then in the CSS you use background-position and background-repeat:no repeat to shift the background underneath so different sections are revealed. Commonly used for icons. Read More: An Easy Guide to CSS Sprites
How would you approach fixing browser-specific styling issues?	If it’s only one browser, then I’d consider a separate stylesheet for that browser in particular. If I’m using bootstrap, then that has some libraries that can help fix browser specific styling issues. Beyond that I’d probably consider using a CSS Reset/Normalize depending on the styling issue. Read More:
How do you serve your pages for feature-constrained browsers? What techniques/processes do you use?	Graceful degradation — The practice of building an application for modern browsers while ensuring it remains functional in older browsers. Progressive enhancement — The practice of building an application for a base level of user experience, but adding functional enhancements when a browser supports it. caniuse.com or Modernizr can also work Read More: MDN: Graceful degradation MDN: Progressive Enhancement
What are the different ways to visually hide content (and make it available only for screen readers)?	"Avoid using visibility:hidden and display:none as most screen-readers skip over this content. Generally for screen-readers you’d want to use the CSS class for only screen readers (typically '.sr-only' but name doesn’t matter). The following CSS will place it off-screen and hide the content inside. Read More: Invisible Content Just for Screen Reader Users"
Have you ever used a grid system, and if so, what do you prefer?	I’ve used both CSS Grid and Flexbox. Often I’ll be using both. CSS Grid for the outer layout of the webpage so you can build a complex responsive design, and flexbox for aligning the content and moving blocks. If I had to pick one I prefer flexbox, but flexbox can’t do everything grid does and grid can’t do everything flexbox does. So it’s really just what tool is most relevant for the issue on hand. Read More: Kevin Powell- CSS Grid Learn CSS Grid Kevin Powell: Learn flexbox the easy way CSS Flexbox Cheatsheet
Have you used or implemented media queries or mobile specific layouts/CSS?	A popular philosophy is to use mobile-first design, where the website is formatted for viewing on a phone and then media queries are used for larger screen sizes. Read More: What is Mobile First Design?
Are you familiar with styling SVG?	SVG (Scalable Vector Graphics) is a series of instructions that tell a web browser what each image looks like. Especially since more and more people are using devices with Retina screens, SVG are important to avoid pixelation of images. Depending on the SVG, it’ll have different geometry properties, like cx/cy or rx/ry, height/width. They have some shared CSS, like the fill property, font properties, etc. Read More: Styling SVG with CSS
Can you give an example of an @media property other than screen?	Most common are: all — for all media typesprint — for printersscreen — for computer screens, tablets and, smart-phonesspeech — for screen readers that “read” the page out loud Read More: 7 Media types Media Query CSS Tutorial
"What are some of the ""gotchas"" for writing efficient CSS?"	"Shorter selectors are always ideal when possible. Avoid tag (div{}) and universal (*{})selectors as they match a large amount of elements. Ensure media queries are more specific than the base styling or they won't change the element. Avoid using shorthands (padding: 5px 5px 5px 5px) if possible. Causes issues with overlapping declarations. Read More:"
What are the advantages/disadvantages of using CSS preprocessors?	The main advantage is flexibility. Having access to variables and functions makes development much easier and results in a lot more readable CSS. Preprocessers can also create browser-specific CSS (webkit, moz-) automatically. As well being able to separate CSS in multiple files without worrying about extra HTTP requests. However, CSS preprocessors generally increase file size, and can take a long time to compile. There may also be errors in the compiling itself that can be difficult to debug. Those are the main disadvantages. Read More:
Describe what you like and dislike about the CSS preprocessors you have used.	[Personal answer, edit here] Read More: 10 CSS Preprocessors Worth Considering
How would you implement a web design comp that uses non-standard fonts?	Web Design Comps (Comprehensives) are mockups for clients and web designers to get a clear consensus idea of what the website looks. If using @font-faces fonts can be downloaded when the page is accessed. I’d also look into web-safe fonts and how that could change the mockup to ensure that there’s workable fallbacks. Read More: How to Add Non-Standard Fonts to a Website
Explain how a browser determines what elements match a CSS selector.	The browser starts at the rightmost selector and traverses up the parent elements to determine a match for multiple selectors. So for <p> <span> it first searches for all <span> in a page and then searches for <p> to confirm if it matches or not. Read More: Why do browsers match CSS selectors from right to left?
Describe pseudo-elements and discuss what they are used for.	They help style parts of the div/text. The browser acts as if a whole new HTML element is added to the markup. Can be used for clearfixes, help with spacing, or decorate the first letter/line like a fancy book. MUST have a “content” property. Read More: ::before / ::after
Explain your understanding of the box model and how you would tell the browser in CSS to render your layout in different box models.	The box model is the perspective that everything in CSS has a box around it. It’s the content area defined by the width. Different browsers all have their own way on how to render those boxes and what should be included in the “content” area. Read More: The CSS Box Model
What does * { box-sizing: border-box; } do? What are its advantages?	The main advantage is you can specify dimensions of your elements without having to do any major calculations. It essentially counts the border in the width of the box itself. With border-box, the following is 100px wide. -- width: 100px; border: 2px solid black; -- Without border-box, it would be 102px wide and could mess up layout. Read More: box-sizing
What is the CSS display property and can you give a few examples of its use?	The display CSS property sets whether an element is a block or inline element. It also sets the layout for the children of said element. So there’s inline-block, block, inline, table, etc for the layout of an element on a page. There’s also display: flex, for the flex-boxes, where you can align-items and justify-content to influence the spacing of children elements. Some others include: display: inherit for inheriting the parent display property, display: initial, display: grid and display:none, etc Read More: MDN: display
"What's the difference between inline and inline-block?"	Inline elements allow elements to sit on their left and right along with their margins and padding. But they don’t respect the top/bottom margins/padding. Inline elements cannot have a height or a width.Typically text. Where inline-blocks differ is that inline-blocks do respect top/bottom margins and padding. AND they also respect height and width. Read More: CSS display: inline vs inline-block
"What's the difference between a relative, fixed, absolute and statically positioned element?"	Static is the default for every page element, meaning it’ll flow into the page normally. Relative means relative to itself, it needs other positioning attributes (top, left, bottom, right) to shift its position from where it’d normally be (with static). It’d also appear above statically positioned elements + have access to z-index. Absolute places any page element exactly where you want it, relative to the next parent element with relative (or absolute) positioning, while removing it from the flow of the page. A fixed position is relative to the browser window. Imagine like scrolling down on Twitter, you can still see the sidebar regardless of how far down you scroll. Read More: Absolute, Relative, Fixed Positioning: How Do They Differ?
What existing CSS frameworks have you used locally, or in production? How would you change/improve them?	[Personal Answer] Read More: Front End Interview CSS
Have you played around with the new CSS Flexbox or Grid specs?	"Sample Answer: ""Absolutely, Flexbox solves so many common problems for me. Such as vertically centering elements in a container. Sometimes it’s not all the features are always compatible with certain browsers, like certain versions of Safari is a huge culprit of this. I also use Bootstrap, which is built with Flexbox with a column system. For Grid, if I need to have a column system I’ll use that over Flexbox because Flexbox only positions elements in one dimension."" Read More: CSS Grid vs. Flexbox: Which Should You Use and When?"
Can you explain the difference between coding a web site to be responsive versus using a mobile-first strategy?	Important to remember they are not mutually exclusive. The main difference is that a mobile first strategy can be responsive, but a responsive website isn’t always mobile first. Mobile-first designs for phones and its usage, buttons will be larger, hyperlinks are larger, items are spaced further apart to adjust for your thumbs instead of a mouse. Font sizes are bigger on average, etc. Read More: Difference Between Mobile-First and Responsive Web Designs
How is responsive design different from adaptive design?	Responsive design uses one layout and adjusts the content, navigation, and elements of the page to fit the user’s screen. Regardless if it’s viewed on a desktop, laptop, tablet, or mobile phone. Like one key growing/shrinking to match different locks. Adaptive design you have multiple different fixed layouts created that adapt to the user’s screen size depending on the breakpoints. You’d detect the screen size and load the appropriate layout for it. Like a ring of keys for many different locks. Responsive Web Design doesn’t offer as much control as adaptive, but it takes less work to build and maintain. Where adaptive design is more oriented towards retrofitting an existing website. Read More: Adaptive Design vs. Responsive Design
Have you ever worked with retina graphics? If so, when and what techniques did you use?	"Retina means high-resolution with pixel ratio > 1. Most mobile displays are retina displays nowadays. Can make standard resolution images blurry. [Personal Answer] Sample Answer: ""What I do is that if I run into this, I’ll use an alternate high quality image that might be like double the dimensions for specifically devices with retina screens."" Read More: Quick Intro: Retina Displays and Graphics"
"Is there any reason you'd want to use translate() instead of absolute positioning, or vice-versa? And why?"	Translate is more efficient for smoother animations because it doesn’t trigger a repaint or reflow, but a composition. Where changing the absolute positioning triggers reflow. Transform causes the browsers to create a GPU layer, but changing an absolute positioning uses the CPU. Also with translate the image still occupies its original space, like as if you were using position relative. Unlike absolute positioning. Read More: Why Moving Elements With Translate() Is Better Than Pos:abs Top/left
CS Theory	Recursion is the process where a function calls itself constantly to solve a problem with the solutions of smaller instances of the same problem. It’ll have a base condition to know when to break out of the recursive loop so it doesn’t cause a stack overflow error. Some examples would be factorials, greatest common divisors, binary trees, linked lists, and so on. Read More: Recursion
What are types?	A data type in programming is a classification that specifies which type of value a variable has and what operations can be applied to it without causing an error. A string for example is a data type for text, and an integer is a data type used to classify whole numbers. You can call the method .split on a string, but not on an integer as that’d cause an error. Read More:
What are data structures?	Data structures ways of organizing data in a computer. It’s a way of arranging data on a computer so it can be accessed and updated efficiently. For example, we can store data in an array which is a collection of items stored at contiguous memory locations. Or a linked list that contains a collection of items with the location in memory to the next node. Stacks, queues, trees, etc. Read More: Data Structures
What is an algorithm?	An algorithm is a series of step-by-step instructions that describe how to do something. Using the proper algorithm for the problem you face is very important as both memory and time is limited. This becomes especially important as datasets become increasingly large. An algorithm with exponential time could take billions of times longer than one with a logarithmic running time. Read More:
What is scope / lexical scope in javascript?	The scope refers to the area where an item (functions or variables) is visible and accessible to other code. The lexical scope is the place in which the item got created. Read More: Lexical Scope in JavaScript – What Exactly Is Scope in JS?
What is polymorphism?	Polymorphism in both OOP and programming, involves function names or operators that work on different things in possibly different ways. Different classes inheriting from the same parent can have the same function with different implementations. As a non-class example, the “+” operator is polymorphic based on what data types it operates on, using different instruction sets at the machine level. Read More: OOP Concepts for Beginners: What is Polymorphism What is polymorphism, what is it for, and how is it used? What is a real life example of polymorphism?
What is encapsulation?	It demands similar data and functions be grouped into like classes/objects. Encapsulation is most often achieved through information hiding, which is the process of hiding all of the secrets of the object that do not contribute to its essential characteristics. Read More: Encapsulation vs Abstraction? Abstraction VS Information Hiding VS Encapsulation
What is a Linked List?	A linked list is a linear data structure, where the elements aren’t stored at contiguous memory locations. A linked list consists of nodes where each node contains the data and a reference (link) to the next node in the list. Some benefits to this creation and deletion are generally more expensive with arrays. As everything has to be moved if an index was deleted. Downside you can’t randomly Access a value in a Linked List, and it requires more memory space. Read More: Linked List Data Structure Linked List vs Array
What is a Doubly Linked List?	Compared to a Linked List, a doubly Linked List includes a previous pointer, which saves a reference to the memory location of the previous node. This has several benefits, the traversal can be done in both directions. Deletion of a given node is O(1) as the previous node can be accessed easily, where a linked list requires O(n). A doubly linked list takes more memory, but a doubly linked list is often used to execute heaps, stacks and binary trees. Read More: Difference between Singly linked list and Doubly linked list
What is a Queue	A queue is a linear structure that follows the First in First Out order. In a queue you remove the item that was least recently added. Uses for queues involve anything where you want things to happen in the order that they were called, but the computer can’t keep up to speed. For example a keyboard buffer where you press letters on the keyboard despite the computer being busy. Read More: Queue Data Structure Programming Concepts: Queues
What is a Stack	A stack is a linear data structure that follows the Last In First Out order. For example think plates stacked over each other at a cafeteria. People take the plate at the top first, with the bottom plate normally staying there the longest amount of time. In programming stacks are often the blocks for function calls or recursive functions. Or for something like an undo function is also a stack. Read More: Stack Data Structure
What is a Hash Table	Hash Tables are basically key/value pairs of data, like a dictionary. JavaScript is unique for hash tables in that objects/classes are a type of hash table. We also have maps that differ slightly but provide similar functionality as a hash table. Hash Tables allow you to store a lot of data and retrieve them very quickly with access being constant time. Read More: JavaScript Hash Table – Associative Array Hashing in JS
What is a Heap	A heap is very similar to a binary search tree. Where it could be a min/max heap. Where the parent node is greater or smaller than the child nodes. The main advantage to heaps over BST is the average time insertion to a heap is constant time vs O(log(n) for a BST. A real world example of a heap are priority queues. Read More:
What is a Trie	A special tree for compactly storing strings where the nodes of a tree store the alphabet. By traversing down the trie, you can check if a value exists and find similar results/words. Some very popular examples for Tries are auto complete, spell checkers, and browser history. Read More:
What is a Tree	A tree is a data structure where a node can have zero or more children. Each node contains a value and branches off with its descendants. Some examples of trees are binary search trees, decision tree based learning in machine learning. Databases use tree structures, etc. Read More:
What is a Binary Search Tree	A binary search tree is a data structure where starting from the parent node, nodes on the left are smaller and nodes on the right are larger. This allows for fast lookup, addition and removal of data items. As each comparison skips about half the tree. Making on average an O(log n). Read More:
What is a Disjoint Set	Disjoint Sets are a data structure where sets have no connection to each other. Imagine if we wanted to find a school of 30, which class representative each one had. It’s also called Union-find as you could merge two groups into one set in constant time If group A was merged with group B, you’d only need to update the parent node in order to connect to the two groups together. Read More:
What is a Bloom Filter	A Bloom filter is a data structure used to test if an element is a member of a set. It can let you know with a high chance of being correct if something exists in a group of things. This can help prevent disk reads by querying a bloom filter before checking a database. By running elements through hash functions, those map to array indexes. There can be false positives. But it’ll always know if an element is missing before checking the database. Read More:
Demonstrate Bubble Sort and explain when you might use it?	"Bubble sort sorts the array by comparing two adjacent elements and swaps them if they’re not in the intended order. Therefore values will bubble up the array until they get where they’re supposed to be. As it’s O(n^2) in worst/average case. And O(n) in the best case. There isn't much real life usage. It’s usable for extremely small datasets though. Read More:"
Demonstrate Insertion Sort and explain when you might use it?	For insertion sort you: Compare the current element (key) to its predecessor. Swap the values if the predecessor is greater than the key. You keep swapping it down to index 0 if applicable. Then move onto the next card when no longer applicable. While it has a O(n^2) worse-case time. If the data is nearly sorted or the problem size is small, it’s perfectly reasonable to use insertion sort. Read More:
Demonstrate Merge Sort and explain when you might use it?	Split the given list into two halves. Continue splitting until you’re left with only single element arrays. Merge the subarrays so each subarray is sorted. Repeat step 2 until you end up with a single sorted array. The worst-case time complexity of Merge Sort is O(n log n), making it one of the fastest sorting algorithms. Read More:
Demonstrate Quicksort and explain when you might use it?	Selects an element of the array as the pivot (usually first or last element) Rearrange the elements so elements smaller of the pivot are on the left, and the right is greater. Equal elements go on either side. Repeat for the left/right sides of the new arrays. Read More:
Explain event delegation	Event delegation is when you use event bubbling to handle events at a higher level in the DOM than when the event originated. For example putting a event listener on the parent element so it applies to all the children elements. Read More:
"Explain how ""this"" works in JavaScript"	"This refers to an object for the current calling context. If we invoke a function that console.logs this in an object it’ll refer to the object it's currently in. However if you tried to invoke the same function outside of the object, the context is no longer the object. There’s a lot of nuances with this with arrow functions and binding, and having this bugs in your React Components with state are incredibly common. Read More:"
Explain how prototypal inheritance works	Imagine we have a user object with its properties and methods, and we want to make admin and guest as slightly modified versions of it. We can reuse what we have in user and build a new object on top of it. All objects have a hidden property Prototype that is either null or references another object. If we read a property from a object and its missing then t’ll read it from its prototype. Read More:
What do you think of AMD vs CommonJS?	The main difference between AMD and CommonJS is the support for asynchronous module loading. AMD by its name (Asynchronous Module Definition) can have better start-up time since it can load multiple libraries that don’t depend on each other all at once. CommonJS is the module system in Node.js, so I’m more familiar with that. It’s synchronous in nature compared to AMD. Read More:
"Explain why the following doesn't work as an IIFE: function foo(){ }();. What needs to be changed to properly make it an IIFE?"	IIFE is an abbreviation for Immediately Invoked Function Expression, its main purpose is to maintain code inside a local scope. In this case foo isn’t being called. Rewritten it’d look like this: Function foo(){}; (); //what is this? There’s no name - computer probably. You’d need to wrap ( ) around the whole thing and omit the name to make it an IIFE. (function(){}()), This way it’ll be an anonymous function that’s treated as a function expression. Read More:
"What's the difference between a variable that is: null, undefined or undeclared? How would you go about checking for any of these states?"	"Undeclared is any variable that has not been declared yet. Console throws errors for undeclared variables. Undefined is a declared variable that has no assigned value, yet. You can check if a variable is undefined with the typeof(variable) !== “undefined” Null is a value that has been assigned to a variable. You can check if a variable is null by using a comparison operator to check if it's equal to null. Read More:"
What is a closure, and how/why would you use one?	Closures is a function that has access to the outer scope that it’s defined in. It’s important to remember that closures are created when functions are defined rather than when they are executed. It’s especially important when dealing with asynchronous calls as the outside scope values could have changed or disappeared all together. Read More:
Can you describe the main difference between a .forEach loop and a .map() loop and why you would pick one versus the other?	Generally the main difference is if I want to return an array or not. .forEach() loop doesn’t return anything, so you can’t do any method chaining. Where a .map() returns a new array which you can chain with .filter or any array methods. It really just comes down too if you just want to iterate through the array than use forEach, but if you want a returned value use .map(). Read More:
"What's a typical use case for anonymous functions?"	Anonymous functions are function expressions, so we can pass them as variables and return functions. You can also use them as IIFE to maintain scope. Arrow functions are also a shorthand for declaring anonymous functions. Read More:
How do you organize your code? (module pattern, classical inheritance?)	[Personal Answer] Sample answer: It generally depends on the team I’m working with. Do we have a style sheet? If we do I’ll reference that, if not I’ll typically imitate and do what the team does. For personal projects I organize my code modularly, with small reusable components because I find that’s easiest to maintain and reuse. Read More:
"What's the difference between host objects and native objects?"	Native objects are built-in objects that are provided by JavaScript. For example String, Number, Array, Object, etc. Where Host objects in JavaScript are supplied by the environment, such as the browser or node. One example of a host object would be the console, Read More:
What is the difference between: function Person(){}, var person = Person(), and var person = new Person()?	The first one: function Person() { } is a function declaration. The second one: var person = Person() returns the return value of function Person and assigns it to Person variable. The third one: creates a new instance of an object based on the Person function. So the variable (person) is now an Object. Read More:
"What's the difference between .call and .apply?"	Call and apply essentially do the same thing in that they let you call a function with complete control over its value and its argument list. Generally when you invoke functions you don’t get to control what this will be inside the function. Apply takes the argument list as an array, where call takes a series of arguments directly. One use for .call or .apply would be for chaining constructors for an object. Read More:
Explain Function.prototype.bind.	The bind method creates a new function when called has its this keyword set to the provided value. This is traditionally equal to where the parent scope of where function is being invoked. So bind lets you change that to let you access the this of objects without being in that object. Read More:
When would you use document.write()?	Ideally never. document.write() pretty much deletes the entire HTML just to write to the HTML. There are some very niche cases such as third party code or for advertisements. Read More:
"What's the difference between feature detection, feature inference, and using the UA string?"	Feature detection is just a way of determining if a feature exists in certain browsers. Feature Inference is also a way of determining if a feature exists, but extension. So if x feature exists, we can also assume that y exists. The User Agent String is a string of text that browsers send containing the information of the browser environment. Read More:
Explain Ajax in as much detail as possible.	AJAX stands for Asynchronous JavaScript and XML. It’s a group of technologies that allows us to make asynchronous requests to a server from the client. This allows us to communicate with the server to update the DOM without having to reload the whole page. For example if I have a user submit a form the regular way, the form will be sent via a POST request and the server will respond with a whole new page. Where with AJAX, sending the form the server will respond with something you can take action on, like a success or failure modal without updating the page. Read More:
What are the advantages and disadvantages of using Ajax?	The main advantage is to improve the performance and usability of web applications to render without data, reducing server traffic requests. It helps the end user experience as they’d never have to see a white window or wait for pages to refresh. Some disadvantages are that Ajax can be difficult to debug and there are some security concerns with Ajax being open source. The users can also find it difficult to bookmark specific states of dynamic web pages. Read More:
"Explain how JSONP works (and how it's not really Ajax)."	"Let’s say you’re on example.com and you want to make a request to the domain example.net. That'd cross domains boundaries which is a security concern. So with JSONP it’s a trick to overcome the same domain policy. JSONP is a little outdated and typically CORS, Cross-origin resource sharing is more of a modern alternative that can parse responses to avoid cross-site scripting (XSS). Read More:"
Have you ever used JavaScript templating? If so, what libraries have you used?	[Personal Answer] Sample Answer: I think mainly I used EJS (Embedded JS) when JavaScript templating came up. JSX for React isn’t exactly a templating language, but I mainly use that instead of JavaScript templating. Read More:
"Explain ""hoisting""."	Hoisting is JavaScript’s default behavior of moving all declarations to the top of the current scope. This allows you to access and use functions before they would be traditionally declared in a top-to-bottom language. Hoisting is convenient if you can put helper functions to the bottom of your code, with the more abstract ones for business logic on top. It’s also required for implementing mutual recursion. Read More:
Describe event bubbling.	Event bubbling happens when a user interacts with a nested element and the event propagates up (aka bubbles) through all the ancestor elements. One example where this could be useful is when we have a lot of child elements that share a parent element. Instead of assigning an event handler to each one, we can have it bubble up to the parent element and deal with it there. Read More:
"What's the difference between an ""attribute"" and a ""property""?"	In JavaScript elements have properties and attributes. The terms are often used interchangeably but attributes are the initial state when rendered in the DOM, and the property is the current state. Typically attributes and properties are kept in sync automatically. But there are some exceptions like value, checked, selected among others that don’t always update one or the other. Read More:
Why is extending built-in JavaScript objects not a good idea?	"Extending JavaScript built-in objects is not a good idea because if the browser/JS has decided that they will provide the same method that you extended, then your method will override the JS implementation. So in the interest of future proofing your code, it'd be difficult for anyone else working on your code to know about the changes. Read More:"
Difference between document load event and document DOMContentLoaded event?	The main difference is the load event at the end of the document loading process where all the objects are in the DOM and all the images, scripts, files have finished loading. DOMContentLoaded fires after the DOM is constructed. Read More:
What is the difference between == and ===?	The former does type conversion before checking for the equality and the latter doesn’t do type conversion. Generally I prefer using the latter as loose equality has some unique returns on NaNs, undefined, null, etc values. And there’s a minor performance benefit in not having to do unnecessary type conversion. Read More:
Explain the same-origin policy with regards to JavaScript.	The same origin policy protects users from having sensitive information stolen. Imagine being logged into your bank, and then you go to a website with malicious code that makes an AJAX request to your bank for your bank account number which succeeds because you’re logged in. The same-origin policy prevents malicious third party requests from seeing the results of that request. Read More:
Make this work: duplicate([1,2,3,4,5]); // [1,2,3,4,5,1,2,3,4,5]	Function duplicate(arr) { Return arr.concat(arr); } Read More:
"Why is it called a Ternary expression, what does the word ""Ternary"" indicate?"	Ternary means operands with three(n-ary) parameters. It’s a shorthand for an if-else statement that only requires one line. (isSnowing) ? “It’s snowing” : “It’s not snowing” It can sometimes be more concise and readable than writing out an if-else statement. Read More:
"What is ""use strict"";? what are the advantages and disadvantages to using it?"	Strict mode is a way to opt in to a restricted variant of JavaScript. It can help catch bad practice, throwing exceptions. It prevents, or throws errors when relatively “unsafe” actions are taken (such as gaining access to the global object). Strict mode is definitely good to use, but it’s hard to use it for existing code-bases without a lot of refactoring, because it’d cause your application to break. Read More:
"Create a for loop that iterates up to 100 while outputting ""fizz"" at multiples of 3, ""buzz"" at multiples of 5 and ""fizzbuzz"" at multiples of 3 and 5"	[Do in VSCode] Read More:
Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?	"Too many global variables can pollute the global scope, and that comes with a number of challenges. Global variables can appear or accidently be reassigned or accessed when you don't want to. Or there could be name conflicts with declaring variables in certain scopes. Especially for a very large code base. This is especially a problem in JavaScript because all code shares a single global namespace. Read More:"
Why would you use something like the load event? Does this event have disadvantages? Do you know any alternatives, and why would you use those?	So the load event fires at the end of the document loading process where all the objects are in the DOM and all the images, scripts, files have finished loading. An alternative is DOMContentLoaded which fires after the DOM is constructed, and not all other resources. This is preferable if you don’t need the full page to be loaded. One example of using this is preventing scripts that require the DOM to reference from being run before the DOM loads. Read More:
Explain what a single page app is and how to make one SEO-friendly.	A single page app loads all the HTML/JS the first time you visit, and the browser rerenders content without refreshing the browser making the user experience smoother. React is a single page application where it’ll render content based on the user input. For the SEO side, you can do pre-rendering to serve search crawlers. Or Google recommends feature detection to make one SEO friendly. Read More:
What is the extent of your experience with Promises and/or their polyfills?	[Personal Answer] Sample Answer: So Promises are exclusive to ES6, which browsers are slow to incorporate and not every browser supports. So when I work outside of ES5, I’d generally use a polyfill for the ES6 Promises as a fallback. Regarding Promises I’ve used for APIs, making input/output requests or just anything that’s blocking the call stack. Read More:
What are the pros and cons of using Promises instead of callbacks?	Promises represent the future result of an asynchronous operation. By using promises instead of callbacks, you can write asynchronous code in a way that resembles synchronous code and is easier to follow. It’s also a lot easier to catch errors in any of the steps with promises where it’d be a lot more difficult with callbacks. Read More:
What are some of the advantages/disadvantages of writing JavaScript code in a language that compiles to JavaScript?	Some examples of languages that compile to JavaScript are like TypeScript, CoffeeScript, etc. They typically let you write shorter code and fix some of the problems with vanilla JavaScript. Like CoffeeScript removes symbols and cuts the amount of code in half because of a lot of the shorthand. And TypeScript provides static typing, benefits that come with not having to deal with type-related bugs. Read More:
What tools and techniques do you use debugging JavaScript code?	[Personal Answer] Sample Answer: It depends on the scale of what I’m working on, but console.logs, developer tools to check network requests, etc. Postman for debugging API requests as well as ESLint if I’m missing syntax or there’s typos. Read More:
What language constructions do you use for iterating over object properties and array items?	For objects: For loops (variable in object) Object.keys(obj), lists all the properties of the object. For arrays: For loops, or ForEach depending on what feels more readable on the situation. Read More:
Explain the difference between mutable and immutable objects.	Mutable and immutable objects are basically the difference between passing by reference vs passing by value. If an item is mutable, modifying the copy modifies the original. This is typically for arrays or objects where having a reference to memory would be a lot more efficient than making a copy. And primitive values would be immutable, or pass by value because it’s easy enough to make a copy of a primitive. Read More:
Explain the difference between synchronous and asynchronous functions.	The main difference is synchronous code runs in sequence, meaning each operation needs to wait for the previous one to complete before executing. Where asynchronous functions run in parallel, meaning it can run while other code is still being processed. When you have slow blocking code, like API requests, or extremely long calculations, like a loop that runs a million times. Those are things you’d want to be asynchronous so the page doesn’t get blocked trying to process it. Read More:
What is event loop? What is the difference between call stack and task queue?	"So JavaScript is single threaded, meaning it can do one thing at a time because it only has one call stack. The call stack helps JavaScript interpreter keep track of the functions being called by adding the function to the top of the call stack. So if you want to do something asynchronously, you can still do so in the browser through webAPIs. Async function goes to the webAPI to be processed while the call stack runs. After it's done it goes to the task queue. Where it’ll wait until the Event Loop checks that the call stack is empty and moves the task queue back to the call stack. Read More:"
Explain the differences on the usage of foo between function foo() {} and var foo = function() {}	Function foo() {} is a function declaration. Where var foo = function() {} is an anonymous function. Function declarations are hoisted, allowing it to have a copy of the local variables as a closure from the state where they were defined. They can also be used for arguments to other functions or invoked immediately. Read More:
What are the differences between variables created using let, var or const?	Use: Const is useful to tell engineers and people working on your code that the variable isn’t intended to be redeclared. Var is was the only option back in es6. And generally I try to avoid using it unless working with pre-es5 code and not using babel. There’s some unique quirks with var’s scoping being global outside of functions. Let is known in the block scope, and generally what I use unless I want to use const instead. Read More:
What are the differences between ES6 class and ES5 function constructors?	ES6 Class constructors are similar to classes in other languages, in that they create objects in a blueprint. The syntax is familiar to other OOP oriented programming languages, and I find it much similar than function constructors. Where ES5 function constructors create objects along with inheritance property. Not all browsers support ES6. Read More:
Can you offer a use case for the new arrow => function syntax? How does this new syntax differ from other functions?	The main benefit is that arrow functions aren’t bound by this keyword, so it’ll lexically go upa scope and use the value of this in the scope which is defined. So that’s really useful for ES6 React Components, to stop this.state from returning undefined. I also like them because I feel they’re more readable in code. Read More:
What advantage is there for using the arrow syntax for a method in a constructor?	The main advantage is the value of this gets set at the time of the function creation. Especially for ES6 React.Components, which doesn’t auto bind methods so one super common issue is for this.state returns undefined. Read More:
What is the definition of a higher-order function?	A higher order function takes a function as an argument or returns a function. Some really common examples would be .map() and .filter() both are higher order functions that take functions as arguments. Read More:
Can you give an example for destructuring an object or an array?	You do this all the time in React, especially with props. Imagine you passed into a child components props that contain two different objects. Everything you had to access the code, you’d have to use syntax like props.objName.property and that can be messy and listing props itself every time can be rather redundant. We can destructure props to be ( { ObjectOne, ObjectTwo } ), so we could use the objects directly without having to reference props. I also do this a lot by destructuring out the irrelevant API information. Read More:
ES6 Template Literals offer a lot of flexibility in generating strings, can you give an example?	I really like how it can evaluate expressions in template literals. Such as `1 + 2 is ${1 + 2}` or `Hello ${firstName || unknown}` But namely it just looks a lot cleaner than string concatenation when you have a ton of variables. Read More:
Can you give an example of a curry function and why this syntax offers an advantage?	Currying takes a function that takes multiple arguments and transforms it into a sequence of multiple functions that take one argument. This can help with partial application, Read More:
What are the benefits of using spread syntax and how is it different from rest syntax?	"The difference is that spread syntax spreads the elements of an array or object into individual variables, whereas rest syntax condenses individual variables and puts them into an array or object. Spread: Array elements are used as arguments individually const myArray = [4, 2, 9]; function printNum(a, b, c, d) { console.log(a, b, c, d); } printNum(...myArray, 'x'); // 4, 2, 9, 'x' Also useful for joining objects together (only one layer deep though, no nested objects will be transferred) Rest: Accepts a variable amount of arguments for a function. Can only be invoked once in the parameters and it must be the last variable named. It can also create an array from the remaining elements. Read More:"
How can you share code between files?	Sharing code is done with modules, they can be thought of as a container that holds related code which can then be exported to another file. For ES6 you use import or export default if you only have one thing to export out of a file. In ES5 you’d use require and module.exports instead. Read More:
Why you might want to create static class members?	Static members (properties and methods) are called without instantiating their class and can’t be called through a class instance. For static methods, they’re used to create utility functions for an application. Like a class’ display name. For static properties you can use them for data that doesn’t need to be replicated across instances. Like the distance between two point classes. Read More:
